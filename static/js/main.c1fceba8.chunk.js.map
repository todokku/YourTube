{"version":3,"sources":["components/searchBar.jsx","components/navBar.jsx","components/youtubecard.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBar","className","type","placeholder","aria-label","onChange","this","props","searchString","maxResults","value","defaultChecked","onClick","searchButton","Component","NavBar","state","icon","faVideo","YoutubeCard","link","title","src","videoId","frameBorder","allow","allowFullScreen","App","q","maxVideoIds","channelId","videoItemsArray","handleSearchButton","bind","handleSearchString","handleMaxResults","e","preventDefault","KEY","fetch","then","res","json","items","id","setState","fetchVideoItems","allVideoItemsArray","getRandomVideos","console","log","target","i","push","Math","floor","random","Fragment","map","key","snippet","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c1fceba8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nclass SearchBar extends Component {\r\n  render() {\r\n    return (\r\n      <form>\r\n        <div className=\"container-fluid\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-8\">\r\n              <input\r\n                className=\"form-control mr-sm-2\"\r\n                type=\"text\"\r\n                placeholder=\"Enter channel keywords\"\r\n                aria-label=\"Search\"\r\n                onChange={this.props.searchString}\r\n              />\r\n            </div>\r\n            <div className=\"col-md-2\">\r\n              <select\r\n                onChange={this.props.maxResults}\r\n                className=\"custom-select\"\r\n              >\r\n                <option value={false} defaultChecked>\r\n                  Quantity\r\n                </option>\r\n                <option value=\"2\">2</option>\r\n                <option value=\"4\">4</option>\r\n                <option value=\"6\">6</option>\r\n                <option value=\"8\">8</option>\r\n                <option value=\"10\">10</option>\r\n                <option value=\"12\">12</option>\r\n                <option value=\"14\">14</option>\r\n                <option value=\"16\">16</option>\r\n              </select>\r\n            </div>\r\n            <div className=\"col-md-2\">\r\n              <button\r\n                onClick={this.props.searchButton}\r\n                className=\"btn btn-dark btn-block\"\r\n                type=\"submit\"\r\n              >\r\n                Generate\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React, { Component } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faVideo } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nclass NavBar extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-dark bg-dark\">\r\n        <span className=\"navbar-brand mb-0 h1\">\r\n          <FontAwesomeIcon icon={faVideo} /> YourTube\r\n        </span>\r\n        <span className=\"navbar-text\">\r\n          Randomly Generate Organized Youtube Video Cards\r\n        </span>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\nclass YoutubeCard extends Component {\r\n  render() {\r\n    const link = (\r\n      <iframe\r\n        title={this.props.title}\r\n        src={`https://www.youtube.com/embed/${this.props.videoId}`}\r\n        frameBorder={0}\r\n        allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\r\n        allowFullScreen\r\n      />\r\n    );\r\n    return (\r\n      <div className=\"col-md-3 \">\r\n        <div className=\"card shadow-sm p-3 mb-5 bg-white rounded h-100\">\r\n          {link}\r\n          <div className=\"card-body\">\r\n            <p className=\"card-text\">\r\n              <b>Title:</b> <span>{this.props.title}</span>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default YoutubeCard;\r\n\r\n/**/\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport SearchBar from \"./components/searchBar\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport NavBar from \"./components/navBar\";\nimport YoutubeCard from \"./components/youtubecard\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      q: \"\",\n      maxVideoIds: 0,\n      channelId: \"\",\n      videoItemsArray: []\n    };\n    this.handleSearchButton = this.handleSearchButton.bind(this);\n    this.handleSearchString = this.handleSearchString.bind(this);\n    this.handleMaxResults = this.handleMaxResults.bind(this);\n  }\n\n  async handleSearchButton(e) {\n    e.preventDefault();\n    const KEY = \"AIzaSyDp042sWeJnrYxaSPe1NTQdsjGH5HZJYy8\";\n    await fetch(\n      `https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=1&q=${this.state.q}&type=channel&key=${KEY}`\n    )\n      .then(res => res.json())\n      .then(res => {\n        const channelId = res.items[0].id.channelId;\n        this.setState({ channelId });\n      });\n\n    await this.fetchVideoItems(KEY);\n  }\n\n  async fetchVideoItems(KEY) {\n    await fetch(\n      `https://www.googleapis.com/youtube/v3/search?key=${KEY}&channelId=${this.state.channelId}&part=snippet,id&order=date&maxResults=50`\n    )\n      .then(res => res.json())\n      .then(res => {\n        const allVideoItemsArray = res.items;\n        let videoItemsArray = this.getRandomVideos(allVideoItemsArray);\n        this.setState({ videoItemsArray });\n      });\n    console.log(this.state);\n  }\n\n  async handleSearchString(e) {\n    const q = e.target.value;\n    await this.setState({ q });\n  }\n\n  async handleMaxResults(e) {\n    const maxResults = e.target.value;\n    await this.setState({\n      maxVideoIds: maxResults\n    });\n  }\n\n  getRandomVideos(allVideoItemsArray) {\n    let videoItemsArray = [];\n    const { maxVideoIds } = this.state;\n    for (let i = 0; i < maxVideoIds; i++) {\n      videoItemsArray.push(\n        allVideoItemsArray[\n          Math.floor(50 * (Math.random() * (1 / maxVideoIds) + i / maxVideoIds))\n        ]\n      );\n    }\n    return videoItemsArray;\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar />\n        <SearchBar\n          searchButton={this.handleSearchButton}\n          searchString={this.handleSearchString}\n          maxResults={this.handleMaxResults}\n        />\n        <div className=\"container\">\n          <div className=\"row\">\n            {this.state.videoItemsArray.map(e => (\n              <YoutubeCard\n                key={e.id.videoId}\n                videoId={e.id.videoId}\n                title={e.snippet.title}\n              />\n            ))}\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}